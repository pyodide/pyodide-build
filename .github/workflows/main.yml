name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # include tags so that hatch-vcs can infer the version
          fetch-depth: 0
          # switch to fetch-tags: true when the following is fixed
          # see https://github.com/actions/checkout/issues/2041
          # fetch-tags: true

      - name: Setup Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run tests
        run: |
          pytest \
            --junitxml=test-results/junit.xml \
            --cov=pyodide-build \
            pyodide_build \
            -m "not integration"

      - name: Upload coverage
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: coverage-no-integration-${{ matrix.os }}
          path: .coverage
          if-no-files-found: error
          include-hidden-files: true

  check-integration-test-trigger:
    name: test-integration-test-trigger
    runs-on: ubuntu-latest
    outputs:
      run-integration-test: ${{ steps.check-integration-test-trigger.outputs.trigger }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: check-integration-test-trigger
        name: Check integration test trigger
        shell: bash
        run: |
          set -e -x

          COMMIT_MSG=$(git log --no-merges -1 --oneline)

          # The integration tests will be triggered on push or on pull_request when the commit
          # message contains "[integration]" or if it is pushed to main branch.
          if [[ "$GITHUB_EVENT_NAME" == push && "$GITHUB_REF" == refs/heads/main ||
                "$COMMIT_MSG" =~ \[integration\] ]]; then
              echo "trigger=true" >> "$GITHUB_OUTPUT"
          fi

  integration-test:
    runs-on: ${{ matrix.os }}
    needs: [check-integration-test-trigger]
    strategy:
      fail-fast: false
      matrix:
        task: [test-recipe, test-src, test-integration-marker]
        os: [ubuntu-latest, macos-latest]
    if: needs.check-integration-test-trigger.outputs.run-integration-test
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # include tags so that hatch-vcs can infer the version
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: "20"

      - name: Install the package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ."[test]"

      - name: Install xbuildenv
        run: |
          pyodide xbuildenv install
          echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@6ab9eb1bda2574c4ddb79809fc9247783eaf9021 # v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}

      - name: Get number of cores on the runner
        id: get-cores
        run: echo "CORES=$(nproc)" >> $GITHUB_OUTPUT

      - name: Run tests marked with integration
        if: matrix.task == 'test-integration-marker'
        run: pytest --junitxml=test-results/junit.xml --cov=pyodide-build pyodide_build -m "integration"

      - name: Run the recipe integration tests (${{ matrix.task }})
        if: matrix.task != 'test-integration-marker'
        env:
          PYODIDE_JOBS: ${{ steps.get-cores.outputs.CORES }}
        working-directory: integration_tests
        run: make ${{ matrix.task }}

      - name: Upload coverage for tests marked with integration
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: matrix.task == 'test-integration-marker'
        with:
          name: coverage-from-integration-${{ matrix.os }}
          path: .coverage
          if-no-files-found: error
          include-hidden-files: true

  coverage:
    name: Collect and upload coverage
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          path: coverage_files
          pattern: coverage-*
          merge-multiple: false

      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.12"

      - name: Combine coverage files
        run: pipx install coverage && coverage combine --append coverage_files/**/.coverage

      - uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          fail_ci_if_error: false
          files: .coverage
