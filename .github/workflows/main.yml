name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 3
  # Increase this value to reset cache if emscripten_version has not changed
  EMSDK_CACHE_FOLDER: "emsdk-cache"
  EMSDK_CACHE_NUMBER: 0

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # include tags so that hatch-vcs can infer the version
          fetch-depth: 0
          # switch to fetch-tags: true when the following is fixed
          # see https://github.com/actions/checkout/issues/2041
          # fetch-tags: true

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run tests
        run: |
          pytest \
            --junitxml=test-results/junit.xml \
            --cov=pyodide-build \
            pyodide_build \
            -m "not integration"

      - name: Upload coverage
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-no-integration-${{ matrix.os }}
          path: .coverage
          if-no-files-found: error
          include-hidden-files: true

  check-integration-test-trigger:
    name: test-integration-test-trigger
    runs-on: ubuntu-latest
    outputs:
      run-integration-test: ${{ steps.check-integration-test-trigger.outputs.trigger }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: check-integration-test-trigger
        name: Check integration test trigger
        shell: bash
        run: |
          set -e -x

          COMMIT_MSG=$(git log --no-merges -1 --oneline)

          # The integration tests will be triggered on push or on pull_request, when:
          # the commit message contains "[integration]", or
          # if it is pushed to main branch, or
          # if the PR has the "integration" label.
          if [[ "$GITHUB_EVENT_NAME" == push && "$GITHUB_REF" == refs/heads/main ||
                "$COMMIT_MSG" =~ \[integration\] ||
                "${{ contains(github.event.pull_request.labels.*.name, 'integration') }}" == "true" ]]; then
              echo "trigger=true" >> "$GITHUB_OUTPUT"
          fi

  integration-test:
    name: integration-test (${{ matrix.task.name }}, ${{ matrix.task.installer }}, ${{ matrix.pyodide-version }}-pyodide, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [check-integration-test-trigger]
    strategy:
      fail-fast: false
      matrix:
        task: [
            { name: test-recipe, installer: pip },
            { name: test-src, installer: pip },
            { name: test-recipe, installer: uv },
            { name: test-src, installer: uv },
            { name: test-integration-marker, installer: pip }, # installer doesn't matter
          ]
        os: [ubuntu-latest, macos-latest]
        pyodide-version: [stable]
        include:
        # Run no-isolation tests and Pyodide minimum version testing only
        # for the pip installer and on Linux
          - task: {name: test-src-no-isolation, installer: pip} # installer doesn't matter
            os: ubuntu-latest
          - task: { name: test-recipe, installer: pip }
            os: ubuntu-latest
            pyodide-version: minimum
          - task: { name: test-src, installer: pip }
            os: ubuntu-latest
            pyodide-version: minimum

    if: needs.check-integration-test-trigger.outputs.run-integration-test
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # include tags so that hatch-vcs can infer the version
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: "20"

      - name: Install the package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ."[test,uv]"

      - name: Install xbuildenv
        run: |
          if [[ "${{ matrix.pyodide-version }}" == "minimum" ]]; then
            MIN_VERSION=$(pyodide xbuildenv search --json | jq -r '.environments | sort_by(.version) | .[0].version')
            echo "Installing Pyodide xbuildenv version: $MIN_VERSION"
            pyodide xbuildenv install $MIN_VERSION
          else
            pyodide xbuildenv install
          fi
          echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV

      - name: Cache emsdk
        uses: actions/cache@v4
        with:
          path: ${{ env.EMSDK_CACHE_FOLDER }}
          key: ${{ env.EMSDK_CACHE_NUMBER }}-${{ env.EMSCRIPTEN_VERSION }}-${{ runner.os }}

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@6ab9eb1bda2574c4ddb79809fc9247783eaf9021 # v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          actions-cache-folder: ${{env.EMSDK_CACHE_FOLDER}}

      - name: Get number of cores on the runner
        id: get-cores
        run: echo "CORES=$(nproc)" >> $GITHUB_OUTPUT

      - name: Run tests marked with integration
        if: matrix.task.name == 'test-integration-marker'
        run: pytest --junitxml=test-results/junit.xml --cov=pyodide-build pyodide_build -m "integration"

      - name: Run the recipe integration tests (${{ matrix.task.name }})
        if: matrix.task.name != 'test-integration-marker'
        env:
          PYODIDE_JOBS: ${{ steps.get-cores.outputs.CORES }}
        working-directory: integration_tests
        run: |

          # https://github.com/pyodide/pyodide-build/issues/147
          # disable package with scikit-build-core
          if [[ ${{ matrix.os }} == "macos-latest" ]]; then
            export RECIPE_BUILD_TARGET="*,!boost-histogram"
          fi

          if [[ "${{ matrix.task.installer }}" == "uv" ]]; then
            export UV_RUN_PREFIX="uv run"
          fi
          make ${{ matrix.task.name }}

      - name: Upload coverage for tests marked with integration
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: matrix.task.name == 'test-integration-marker'
        with:
          name: coverage-from-integration-${{ matrix.os }}
          path: .coverage
          if-no-files-found: error
          include-hidden-files: true

  coverage:
    name: Collect and upload coverage
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: coverage_files
          pattern: coverage-*
          merge-multiple: false

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"

      - name: Combine coverage files
        run: pipx install coverage && coverage combine --append coverage_files/**/.coverage

      - uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        with:
          fail_ci_if_error: false
          files: .coverage
