name: main

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build
        run: |
          python -m pip install build
          python -m build .

      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Test
        run: |
          python -m pip install --upgrade pip
          pip install ".[test]"

          pytest -v \
            --junitxml=test-results/junit.xml \
            --cov=pyodide-build \
            pyodide_build

      - uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false

  check-integration-test-trigger:
    name: test-integration-test-trigger
    runs-on: ubuntu-latest
    outputs:
      run-integration-test: ${{ steps.check-integration-test-trigger.outputs.trigger }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: check-integration-test-trigger
        name: Check integration test trigger
        run: bash tools/check_integration_test_trigger.sh

  integration-test:
    runs-on: ubuntu-latest
    needs: [check-integration-test-trigger]
    if: needs.check-integration-test-trigger.outputs.run-integration-test
    steps:
      - uses: actions/checkout@v4
        with:
          # include tags so that hatch-vcs can infer the version
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install the package
        run: |
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Install xbuildenv
        run: |
          pyodide xbuildenv install
          echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v12
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}

      - name: Run the integration tests (recipes)
        run: |
          cd integration_tests
          make test-recipe

  publish:
    name: >-
      Publish to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment:
      name: pypi
      url: https://pypi.org/p/pyodide-build
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
